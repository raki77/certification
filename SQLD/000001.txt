모델링 
    조건:
        1. 현실세계 (반영)
        2. 단순화 (표현)
        3. 관리하는 DATA, 모델 설계


    특징:
        1. 추상화
        2. 단순화
        3. 명확화


    3가지 관점:
        1. DATA 관점
        2. PROCESS 관점
        3. DATA 와 PROCESS 상관 관점 
        (DATA vs PROCESS, Interaction)



    데이터 모델링을 할 때 지양해야 할 점:
        1. 중복 (Duplication)
        2. 비유연성 (Inflexibility) :
            데이터 모델과 프로세스 분리
        3. 비일관성 (Insonsistency) : 
            연관관계에 대해 명확하게 정의



    3가지 관계:

        1. 개념적 데이터 모델링 [전사적 수행]
            a. 업무 중심적
            b. 포괄적인 수준 모델링

        2. 논리적 데이터 모델링 [정규화 활동이 이루어지는 단계]
            a. 재사용성 높다.
            b. KEY, 속성, 관계 모두 표현하는 단계

        3. 물리적 데이터 모델링 
            a. 실제 DB 구현하도록 성능, 가용성
            (물리적) 성격을 고려하여 모델 표현.



    ANSI-SPARC, 정의한 3단계 스키마 구조:

        1. 외부 스키마:
            View단계로 여러 개의 사용자 관점으로 구성
    
        2. 개념 스키마:
            모든 사용자 관점을 통합, 조직 전체 관점의 통합적 표현

        3. 내부 스키마:    
            물리적 저장 구조



    물리적 독립성:
        내부 스키마가 변경 되어도 외/내부 스키마는 영향받지 않는다.

    논리적 독립성:  
        개념 스키마가 변경 되어도 외부 스키마는 영향받지 않는다.



ERD 작성순서:
    1. 엔티티 도출, 그린다.
    2. 배치
    3. 관계설정
    4. 관계명 기입
    5. 관계 참여도 기입
    6. 관계 필수/선택 여부 기입



엔터티 갖는 특징
    1. 다른 엔티티와 1개 이상의 관계 가지고 있어야 한다.
    2. 반드시 속성 가지고 있어야 한다.
    3. 유니크함, 보장할 수 있는 식별자 있어야 한다.
    (엔터티는 2개 이상 , 2개 이상의 인스턴스 가져야 한다.)
    4. 업무에 쓰이는 정보여야 한다.
    



엔티티 발생시점에 따라 분류:

    1. 기본 엔터티:
        독립적 생성, 자신만의 주식별자 가진다, 다른 엔터티의 부모 역할

    2. 중심 엔터티:
        기본 엔터티로부터 파생되어 많은 데이터를 갖게 되며, 행위 엔터티 생성한다.

    3. 행위 엔터티:
        2 개 이상의 부모 엔터티로부터 파생되고 보통 설계 초기 단계보다는 상세 설계 단계에서 도출된다.



속성:
    엔터티 특징을 나타내는 최소의 DATA단위
    프로세스에 사용되는 최소 DATA 레벨,
    프로세스에 필요한 항목이어야 한다.


분류:
    특성에 따른 분류 : 
        1. 기본속성 : 업무 프로세스 분석 통해, 바로 정의 가능
        2. 설계속성 : 업무 존재 x, 설계하다 보니 필요 하다고 판단되어 도출해낸 속성
        3. 파생속성 : 다른 속성의 속성값 계산하거나, 특정한 규칙으로 변형하여, 생성한 속성


    구성방식에 따른 분류:
        1. PK 속성
        2. FK 속성
        3. 일반속성




FK속성 :
    다른 엔터티와 관계를 맺게 해주는 매개체 역할하는 속성, 
    다른 엔터티의 pk값과 일치 하거나, NULL 값을 가질 수 있는 속성




도메인:
    학생이라는 엔터티가 있을 때 학점이라는 속성의 속성값은 0.1 ~ 4.5 사이의 실수를 가질 수 있는데
    이렇게 각 속성이 가질 수 있는 속성값의 범위를 데이터 모델링에서는 [도메인] 이라고 한다.



용어사전:
    엔터티의 속성명을 정의할 때 명확한 의미의 이름을 부여하고 다른 엔터티와의 혼란을 예방하기 위해
    이용하는 것.



표기법:
    관계명 = 관계 이름
    관계차수 = 관계에 참여하는 수
    관계선택사양 = 필수인지 선택인지 여부
        1. 필수적 관계 : 참여자가 반드시 존재해야 하는 관계
        2. 선택적 관계 : 참여자가 없을 수도 있는 관계



주식별자:
    1. 유일성 : 
        해당 속성이 인스턴스를 유일하게 식별할 수 있는 성질을 가졌는지?
    2. 최소성 : 
        최소한의 속성들로만 유일성을 보장하는지?
    3. 불변성 : 
        속성값이 변하지 않아야 한다. 
    4. 존재성 :
        속성값은 NULL이 될 수 없다.



식별자 관계:
    1. 강결합
    2. 부모엔터티 식별자가 [자식 엔터티의 주식별자]
    3. 부모 엔터티 있어야 생성 가능
    4. 실선 표현
    5. SQL문의 조인을 최소화 해준다.



비식별자 관계:
    1. 약결합
    2. 부모엔터티 식별자가 [자식 엔터티의 일반속성]
    3. 부모 엔터티 없는 자식 엔터티 생성 가능
    4. 점선 표현
    5. 부모-자식 관계가 유지 안될 수 있다.
    -> 일반 속성 값은 NULL이 들어갈 수 있기 때문에 부모엔티티의 식별자 속성에 값이 없을 때 자식 엔티티의 속성 값(인스턴스)이 생성 가능하다.


데이터 모델과 SQL

    성능 데이터 모델링 개요

        1. 성능 데이터 모델링 정의
            -. 성능 저하의 원인 중 하나는 데이터 모델링의 근본적인 디자인이 잘못되어 있는 경우도 많다.
            -. 성능 데이터 모델링을 통해 성능향상을 도모해야 한다.
            -. 성능 데이터 모델링이란?
                (DB 성능 향상을 목적으로 설계단계의 데이터모델링 때부터 성능과 관련된 사항이 모델링에 반영될 수 있도록 하는 것.)

        2. 성능 데이터 모델링 수행 시점
            -. 사전에 성능 모델링을 할수록 성능 향상을 위한 비용은 적게 든다.
            -. 분석/설계 단계에서 성능을 고려해 데이터 모델링을 수행할 경우 재업무 비용을 최소화할 수 있다.
            -. 분석/설계 단계에서 처리성능을 향상 시킬 방법을 고려해야 한다.

        3. 성능 데이터 모델링 고려사항
            -.성능 데이터 모델링 프로세스
                > 정규화 -> 1등
                > DB 용량 산정
                > 트랜잭션 유형 파악 -> 테이블 수직 분할 할 때 (반정규화)
                > 용량과 트랜잭션 유형에 따라 [반정규화]
                > 이력모델 조정, PK/FK 조정, 슈퍼타입/서브타입 [조정]
                > 성능 관점에서 데이터 모델을 [검증]                

정규화:
    데이터에 대한 중복성을 제거한다.
    정규화를 할수록 엔터티는 증가한다.
    데이터 입력, 수정, 삭제 성능이 향상 된다.

정규화:
    정규화란?
        엔티티를 작은 단위로 분리하는 과정 -> 큰 엔티티를 작은 엔티티들로 분리하고 관계 맺음
    : [논리 데이터 모델] 에서 행하는 과정이다. 
    
    
    정규화 특징 및 하는 이유와 개념 = 장점    
    1. 데이터 무결성 위해 수행
    2. 최소한 데이터만을 하나의 엔티티에 넣는 과정, 데이터 분해 과정
    3. DATA 일관성 확보
    4. DATA 독립성 확보 (중복 제거)
    5. DATA 유연성 확보 (필요 데이터 들의 분할로 인해, 유연하게 접근 가능)

    입력/수정/삭제 성능은 일반적으로 향상
    >>> 조회 성능이 저하 될 수 있음.


    정규화 단점
    1. 엔티티 갯수 증가
    2. 이로 인한 관계 증가
    3. 데이터 조회 시 여러 번의 조인이 요구
    4. 조회 성능의 저하  
 


Rollup:
    Rollup은 상위 수준의 데이터로 집계를 수행하는 방식입니다.
    일반적으로 여러 차원 중 하나 이상의 차원을 축소하여 특정 계층으로 데이터를 요약할 때 사용됩니다.
    예를 들어, 월별 매출 데이터를 Rollup을 통해 분기별 또는 연도 별로 요약할 수 있습니다. 
    이는 데이터를 더 높은 수준의 집계로 축소하는 과정입니다.
    Rollup을 수행하면 데이터의 구체적인 수준에서 더 일반적인 수준으로 요약됩니다.




Cube: 
    Cube는 여러 차원의 모든 가능한 조합을 기반으로 다차원 데이터를 집계 하는 방식입니다.
    모든 차원에 대해 가능한 모든 집계 값을 포함 하므로 더 복잡하고 다양한 데이터를 얻을 수 있습니다.
    예를 들어, 제품, 지역, 시간과 같은 여러 차원을 기준으로 매출 데이터를 Cube로 구성하면 각 차원의 
    모든 조합에 대한 집계 데이터가 만들어 집니다.
    Cube는 데이터를 분석할 때 다양한 차원과 계층을 고려하여 더욱 상세한 분석을 가능하게 합니다.



차이점 요약 :
    Rollup: 특정 차원을 축소해 상위 수준으로 집계 (예: 월별 → 연도별).
    Cube: 모든 차원의 조합을 고려한 다차원 집계.
    Rollup은 더 단순한 요약을 제공하고 Cube는 다양한 시각에서 데이터 탐색을 가능하게 하므로, 
    목적에 따라 적합한 방법을 선택하게 됩니다.


트랜잭션:
    하나의 커밋 단위로 묶어야 한다.
    데이터를 조작하기 위한 논리적 작업 단위, 데이터 모델로 표현할 수 있다.
    데이터는 트랜잭션 범위로 묶일 수 있다.

    